#!/usr/bin/env python
import matplotlib.pyplot as plt
import os
from math import *

pwd = os.getcwd()

dt = 0.1
x = 0
y = 0
phi = -0.523599
v = 1
w = 0
#ipopt
refer_point = [(1, 0), (1.43301, -0.25), (1.86603, -0.5), (2.29904, -0.75), (2.73205, -1), (3.16506, -1.25), (3.59808, -1.5), (4.03109, -1.75), (4.4641, -2), (4.89711, -2.25), (5.33013, -2.5), (5.76314, -2.75)]
solver_point = [(-4.86791e-16, 1.59963e-16), (0.0952628, -0.055), (0.208028, -0.119683), (0.338684, -0.193366), (0.487568, -0.275423), (0.65495, -0.365331), (0.841021, -0.462684), (1.04591, -0.567175), (1.26973, -0.678567), (1.51254, -0.79665), (1.77091, -0.919535), (2.03769, -1.04368)]
control_list = [(2, 0.562588), (2, 0.333539), (2, 0.161999), (2, 0.043995), (2, -0.0275141), (2, -0.0615443), (2, -0.0680569), (2, -0.0570659), (2, -0.037885), (1.22076, -0.0184902), (0.408584, -0.00481729)]
#snopt
solver_point = [(0, 0), (0.0952628, -0.055), (0.208028, -0.119683), (0.338684, -0.193366), (0.487568, -0.275423), (0.65495, -0.365332), (0.841021, -0.462685), (1.04591, -0.567177), (1.26973, -0.678569), (1.51254, -0.796652), (1.7709, -0.919538), (2.03768, -1.04368)]
control_list = [(2, 0.562576), (2, 0.333524), (2, 0.161973), (2, 0.0439775), (2, -0.0275128), (2, -0.0615247), (2, -0.0680274), (2, -0.0570375), (2, -0.0378654), (1.22076, -0.0184811), (0.408584, -0.00481516)]
#acado
solver_point = [(0, 0), (0.0953172, -0.0549055), (0.208311, -0.119189), (0.339337, -0.192209), (0.4887, -0.27339), (0.656634, -0.36226), (0.843308, -0.45845), (1.04884, -0.561678), (1.27332, -0.671709), (1.51684, -0.788325), (1.77596, -0.909646), (2.04259, -1.03173)]
control_list = [(2, 0.568865), (2, 0.340614), (2, 0.168055), (2, 0.0480895), (2, -0.0255988), (2, -0.0615), (2, -0.0692592), (2, -0.058775), (2, -0.0394284), (1.22287, -0.0194029), (0.205319, -0.00252389), (0.205319, -0.00252389)]

calculate_point = [(x, y, phi, v, w)]
for c in control_list:
    x += (cos(phi) * dt * v + cos(phi) * dt ** 2 / 2 * c[0])
    y += (sin(phi) * dt * v + sin(phi) * dt ** 2 / 2 * c[0])
    phi += (dt * w + dt ** 2 / 2 * c[1])
    v += dt * c[0]
    w += dt * c[1]
    calculate_point.append((x, y, phi, v, w))

### vehicle origin point
plt.plot(0.0, 0.0, 'xb')
### refer_point
plt.scatter([r[0] for r in refer_point], [r[1] for r in refer_point],
            s=10, color='green', alpha=0.5, label="refer_point")
### solver_point
plt.scatter([c[0] for c in solver_point], [c[1] for c in solver_point],
            s=10, color='blue', alpha=0.5, label="solver_point")
### use control calculate points
plt.scatter([c[0] for c in calculate_point], [c[1] for c in calculate_point],
            color='red', s=10, alpha=0.5, label="control_calculate")
plt.legend()
plt.axis('equal')
plt.grid(True)
plt.show()
